name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  branch-policy:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check branch names
        run: |
          # Target branch check - only allow merges to main from develop
          if [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" != "develop" ]]; then
            echo "ERROR: You can only merge to main from develop branch!"
            exit 1
          fi
          
          # Other branches should only target develop
          if [[ "${{ github.base_ref }}" != "main" && "${{ github.base_ref }}" != "develop" ]]; then
            echo "ERROR: Feature branches should target develop branch!"
            exit 1
          fi
          
          echo "Branch policy check passed!"

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [branch-policy]
    if: always() && (needs.branch-policy.result == 'success' || needs.branch-policy.result == 'skipped')

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Create Gradle wrapper if not exists
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "Gradle wrapper not found, creating it..."
          # Create minimal wrapper files
          mkdir -p gradle/wrapper
          echo 'distributionBase=GRADLE_USER_HOME' > gradle/wrapper/gradle-wrapper.properties
          echo 'distributionPath=wrapper/dists' >> gradle/wrapper/gradle-wrapper.properties
          echo 'distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-bin.zip' >> gradle/wrapper/gradle-wrapper.properties
          echo 'zipStoreBase=GRADLE_USER_HOME' >> gradle/wrapper/gradle-wrapper.properties
          echo 'zipStorePath=wrapper/dists' >> gradle/wrapper/gradle-wrapper.properties
          
          # Download wrapper jar
          curl -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar
          
          # Create wrapper scripts
          echo '#!/bin/sh' > gradlew
          echo 'exec java -jar $0.jar "$@"' >> gradlew
          
          echo '@echo off' > gradlew.bat
          echo 'java -jar %~dp0gradle\wrapper\gradle-wrapper.jar %*' >> gradlew.bat
        fi

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest
      
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: app/build/reports/tests/
        
    - name: Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: app/build/outputs/apk/debug/app-debug.apk

  cleanup-branch:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'develop' && github.head_ref != 'main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Delete branch after merge
        run: |
          git push origin --delete ${{ github.head_ref }}
          echo "Branch ${{ github.head_ref }} has been deleted after successful merge to develop." 